#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/select.h>
#include <sys/time.h>
#include <sys/un.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <linux/types.h>
#include <linux/netlink.h>
#include "CMainLoop.h"
#include "lcddrv.h"
#include "Utils.h"
#include "IValveMonitorFactory.h"
#include "CHeatMonitor.h"
#include "CPortal.h"
#include "CCardHost.h"
#include "CValveMonitor.h"
#include "valveusers.pb.h"
#include <math.h>

#ifdef DEBUG_MAINLOOP
#include <time.h>
#define DEBUG(...) do {printf("%ld %s::%s %d ----", time(NULL), __FILE__, __func__, __LINE__);printf(__VA_ARGS__);} while(false)
#ifndef hexdump
#define hexdump(data, len) do {for (uint32 i = 0; i < (uint32)len; i ++) { printf("%02x ", *(uint8 *)(data + i));} printf("\n");} while(0)
#endif
#else
#define DEBUG(...)
#ifndef hexdump
#define hexdump(data, len)
#endif
#endif

#define KEY_NAME "/dev/KBD0"

//the screen shows only one line
#define SL_Y 3
//the screen shows two lines
#define DL_Y0 1
#define DL_Y1 4
//the screen shows three lines
#define TL_Y0 1
#define TL_Y1 3
#define TL_Y2 5

extern int heatCount;
extern bool cardhostEnabled;
int valveTimeout;


static int InitHotplugSock()
{
    struct sockaddr_nl snl;
    const int buffersize = 16 * 1024;
    int retval;
    memset(&snl, 0x00, sizeof(struct sockaddr_nl));
    snl.nl_family = AF_NETLINK;
    snl.nl_pid = getpid();
    snl.nl_groups = 1;
    int hotplug_sock = socket(PF_NETLINK, SOCK_DGRAM, NETLINK_KOBJECT_UEVENT);
    if (hotplug_sock == -1) {
        printf("error getting socket: %s", strerror(errno));
        return -1;
    }
    /* set receive buffersize */
    setsockopt(hotplug_sock, SOL_SOCKET, SO_RCVBUFFORCE, &buffersize, sizeof(buffersize));
    retval = bind(hotplug_sock, (struct sockaddr *) &snl, sizeof(struct sockaddr_nl));
    if (retval < 0) {
        printf("bind failed: %s", strerror(errno));
        close(hotplug_sock);
        hotplug_sock = -1;
        return -1;
    }
    return hotplug_sock;
}

static void PrintHZ(char x, char y, const char* pHZ, uint8 HZLen)
{
    for (uint8 i = 0; i < HZLen; i++) {
        lcdwritehz(pHZ[i], y, x+i, 0);
    }
}

static void PrintChar(char x, char y, const char * buf)
{
    char dx = x * 2;
    for (int i = 0, len = strlen(buf); i < len; i ++) {
        lcdwritechar(buf[i], y, dx + i, 0, 0, 0, 0, 0);
    }
}

CMainLoop * CMainLoop::instance = NULL;
CMainLoop * CMainLoop::GetInstance()
{
    if (instance == NULL) {
        instance = new CMainLoop();
    }
    return instance;
}

CMainLoop::CMainLoop()
{
    usbmode = false;
    int len = heatCount + 6;
    borders = new uint8[len];
    borders[0] = 1;
    borders[1] = 1;
    borders[2] = 1;
    borders[3] = 1;
    for (int i = 4; i < heatCount; i ++) {
        borders[i] = 5;
    }
    borders[4 + heatCount + 0] = 1;
    borders[4 + heatCount + 1] = 0;
    cardidx = 4 + heatCount + 0;
    vidx = 0;
    hidx = 0;
    hotplug = -1;

    checkings = new bool[len];
    checkings[0] = false;
    for (int i = 1; i < len; i ++) {
        checkings[i] = true;
    }
}

CMainLoop::~CMainLoop()
{
    delete borders;
    delete checkings;
    if (hotplug != -1)
        close(hotplug);
}

void CMainLoop::Run()
{

    fd_set rfds;
    struct timeval tv;
    int retval, r;
    char chr;
    char buf[1024];
    time_t last = time(NULL);
    time_t valveLast = last;
    time_t lastKeyPressed = last;

    kfd = open(KEY_NAME,O_RDONLY);
    if (kfd <0) {
        DEBUG("open device key error!\n");
        return;
    }

    valveTimeout = log10(valveCount);
    if (valveTimeout == 0)
        valveTimeout = 1;

    hotplug = InitHotplugSock();

    // tv.tv_sec = 0;
    // tv.tv_usec = 200000;

    tv.tv_sec = 1;
    tv.tv_usec = 0;

    //init LCD
    LcdGpin();
    Lcd_TestBuf();
    LcdInit(1);
    LCDClear();

    Draw();

    while (true) {
        FD_ZERO(&rfds);
        FD_SET(kfd, &rfds);
        if (hotplug != -1)
            FD_SET(hotplug, &rfds);
        retval = select(MAX(kfd, hotplug) + 1, &rfds, NULL, NULL, &tv);
        if (retval) {
            if (FD_ISSET(kfd, &rfds)) {
                r = read(kfd, &chr, sizeof(char));
                lastKeyPressed = time(NULL);
                LcdLedOn();
                switch (chr) {
                case 0x25: // left
                    DEBUG("Left pressed\n");
                    if (hidx != 0) {
                        hidx --;
                        Draw();
                    }
                    break;
                case 0x26: { // up
                    DEBUG("Up pressed\n");
                    if (vidx != 0) {
                        if (hidx == 0) {
                            vidx --;
                            Draw();
                        }
                    }
                    break;
                }
                case 0x27: // right
                    DEBUG("Right pressed\n");
                    if (hidx < borders[vidx] - 1) {
                        hidx ++;
                        Draw();
                    }
                    break;
                case 0x28: { // down
                    DEBUG("Down pressed\n");
                    if (borders[vidx + 1] != 0) {
                        if (hidx == 0) {
                            vidx ++;
                            Draw();
                        }
                    }
                    break;
                }
                case 0x0D: // enter
                    DEBUG("Enter pressed\n");
                    if (vidx == 3 && wireless != true && time(NULL) - valveLast > valveTimeout && usbmode != true) {
                        CValveMonitor::GetInstance()->Broadcast(2); // don't broadcast with 1
                        valveLast = time(NULL);
                        checkValve = true;
                        Draw();
                    } else if (usbmode) {
                        switch (usbstate) {
                        case 0:
                            usbstate = 1;
                            Draw();
                            break;
                        case 1:
                            usbstate = 2;
                            Draw();
                            break;
                        case 2:
                            usbstate = 0;
                            usbmode = false;
                            Draw();
                            break;
                        default:
                            break;
                        }
                    }
                    break;
                case 0x1B: // esc
                    DEBUG("ESC pressed\n");
                    if (usbmode) {
                        usbstate = 0;
                        usbmode = false;
                        Draw();
                    }
                    break;
                default:
                    break;
                }
            }

            if (FD_ISSET(hotplug, &rfds)) {
                bzero(buf, 1024);
                int r = recv(hotplug, buf, 1024, 0);
                int p = 0;
                while (p < r) {
                    if (strstr(buf + p, "add@/block/sd")) {
                        if (strlen(buf + p) > sizeof("add@/block/sd?/")) {
                            bzero(usbdevice, 32);
                            sprintf(usbdevice, "/dev/%s", buf + p + strlen("add@/block/sd?/"));
                            DEBUG("/dev/%s plugged\n", usbdevice);
                            usbmode = true;
                            usbstate = 0;
                            Draw();
                        }
                    } else if (strstr(buf + p, "remove@/block/sd")) {
                        if (strlen(buf + p) > sizeof("remove@/block/sd?/")) {
                            bzero(usbdevice, 32);
                            sprintf(usbdevice, "/dev/%s", buf + p + strlen("remove@/block/sd?/"));
                            DEBUG("/dev/%s removed\n", usbdevice);
                            usbmode = false;
                            usbstate = 0;
                            Draw();
                        }
                    }
                    p += strlen(buf + p) + 1;
                }
            }
        } else if (time(NULL) - valveLast > valveTimeout && wireless != true && usbmode != true && checkValve == true) {
            Draw();
            checkValve = false;
        } else if (checkings[vidx] && time(NULL) - last > 10) {
            last = time(NULL);
            Draw();
        } else if (time(NULL) - last > 60) {
            last = time(NULL);
            Draw();
        } else if (vidx == 0 && time(NULL) - last > 1) {
            last = time(NULL);
            Draw();
        }

        if (time(NULL) - lastKeyPressed > 30) {
            LcdLedOff();
            vidx = 0;
            hidx = 0;
        }
    }
}

void CMainLoop::Draw()
{
    if (usbmode) {
        switch (usbstate) {
        case 0:
            DrawUsbPlugin();
            break;
        case 1:
            DrawUsbBackup();
            break;
        case 2:
            DrawUsbDone();
            break;
        }
    } else {
        switch (vidx) {
        case 0:
            DrawInitial();
            break;
        case 1:
            DrawStatus();
            break;
        case 2:
            DrawGPRS();
            break;
        case 3:
            if (wireless) {
                DrawForwarder();
            } else {
                DrawValve();
            }
            break;
        default:
            if (vidx == cardidx) {
                DrawCardHost();
            } else {
                DrawHeat();
            }
            break;
        }
    }
}

void CMainLoop::DrawInitial()
{
    LCDClear();
    char buf[32] = {0};
    bzero(buf, 32);
    PrintHZ(0, TL_Y0, "数据集中器", 5);
    sprintf(buf, "v%02d.%02d", VERSION, SUBVERSION);
    PrintChar(5, TL_Y0, buf);
    PrintChar(0, TL_Y1, "HDR30-S01");

    uint32 date[7] = {0};
    if (ERROR_OK == GetDateTime(date, 1)) { //RTC
        bzero(buf, 32);
        sprintf(buf, "%04d-%02d-%02d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
        PrintChar(0, TL_Y2, buf);
    }
}

void CMainLoop::DrawStatus()
{
    LCDClear();
    bool ok = false;
    Status status = IValveMonitorFactory::GetInstance()->GetStatus();
    if (wireless) {
        PrintHZ(0, TL_Y0, "转发器", 3);
    } else {
        PrintHZ(0, TL_Y0, "阀控器", 3);
    }
    switch (status) {
    case STATUS_OK:
        PrintChar(1/*space*/ + 3, TL_Y0, "OK");
        ok = true;
        break;
    case STATUS_CHECKING:
        PrintHZ(1/*space*/ + 3, TL_Y0, "检测中", 3);
        break;
    default:
        PrintChar(1/*space*/ + 3, TL_Y0, "Err");
        break;
    }
    status = STATUS_CHECKING;
    CHeatMonitor::GetInstance()->GetStatus(status);
    PrintHZ(0, TL_Y1, "热总表", 3);
    switch (status) {
    case STATUS_OK:
        PrintChar(1/*space*/ + 3, TL_Y1, "OK");
        ok &= true;
        break;
    case STATUS_CHECKING:
        PrintHZ(1/*space*/ + 3, TL_Y1, "检测中", 3);
        break;
    default:
        PrintChar(1/*space*/ + 3, TL_Y1, "Err");
        break;
    }
    status = STATUS_CHECKING;
    CPortal::GetInstance()->GetGPRSStatus(status);
    PrintChar(0, TL_Y2, "GPRS");
    switch (status) {
    case STATUS_OK:
        PrintChar(1/*space*/ + 3, TL_Y1, "OK");
        ok &= true;
        break;
    case STATUS_CHECKING:
        PrintHZ(1/*space*/ + 3, TL_Y1, "检测中", 3);
        break;
    default:
        PrintChar(1/*space*/ + 3, TL_Y1, "Err");
        break;
    }
    checkings[vidx] = ~ok;
}

void CMainLoop::DrawGPRS()
{
    LCDClear();
    uint8 signal = 99;
    char buf[16];
    Status status = STATUS_ERROR;
    CPortal::GetInstance()->GetGPRSStatus(status);
    PrintHZ(0, TL_Y0, "网络服务", 4);
    PrintChar(4, TL_Y0, ":");
    switch (status) {
    case STATUS_OK:
        PrintHZ(4 + 1, TL_Y0, "正常", 4);
        CPortal::GetInstance()->GetGPRSSignalIntesity(signal);
        PrintHZ(0, TL_Y1, "信号强度", 4);
        PrintChar(4, TL_Y1, ":");
        if (signal == 99) {
            PrintChar(4 + 1, TL_Y1, "Busy");
        } else {
            bzero(buf, 16);
            sprintf(buf, "%02d", signal);
            PrintChar(4 + 1, TL_Y1, buf);
        }
        PrintHZ(0, TL_Y2, "远程连接", 4);
        PrintChar(4, TL_Y2, "......");
        break;
    case STATUS_CHECKING:
        PrintHZ(4 + 1, TL_Y1, "检测中", 3);
        PrintHZ(0, TL_Y1, "信号强度", 4);
        PrintChar(4, TL_Y1, ":...");
        PrintHZ(0, TL_Y2, "远程连接", 4);
        PrintChar(4, TL_Y2, "......");
        break;
    default:
        PrintHZ(4 + 1, TL_Y1, "无", 1);
        PrintHZ(0, TL_Y1, "信号强度", 4);
        PrintChar(4, TL_Y1, ":");
        PrintHZ(0, TL_Y2, "远程连接", 4);
        PrintChar(4, TL_Y2, ":...");
        break;
    }
}

void CMainLoop::DrawForwarder()
{
    LCDClear();
    static ForwarderInfoListT info;

    if (!CForwarderMonitor::GetInstance()->GetForwarderInfo(info)) {
        PrintHZ(0, DL_Y0, "转发器", 3);
        PrintChar(3, DL_Y0, ":");
        PrintHZ(0, DL_Y1, "检测中", 3);
        checkings[vidx] = true;
        return;
    }

    checkings[vidx] = false;

    if (0 == info.size()) {
        PrintHZ(0, DL_Y0, "转发器", 3);
        PrintChar(3, DL_Y0, "0-0");
        return;
    }

    borders[3] = info.size();
    if (hidx >= borders[3]) {
        hidx = borders[3] - 1;
    }

    Write(info[hidx].A1ResponseStr, info[hidx].A1ResponseStrLen);

    char buf[32];
    int fid = (info[hidx].ForwarderID >> 16) & 0xFFFF;
    PrintHZ(0, DL_Y0, "转发器", 3);
    bzero(buf, 32);
    sprintf(buf, "%d-%d:%02X%02X", borders[3], hidx + 1, fid & 0xFF, (fid >> 8) & 0xFF);
    PrintChar(3, DL_Y0, buf);

    if (info[hidx].IsOffline) {
        PrintChar(0, DL_Y1, "Offline");
    } else {
        PrintHZ(0, DL_Y1, "阀控器数量", 5);
        bzero(buf, 32);
        sprintf(buf, ":%d", info[hidx].ValveCount);
        PrintChar(5, DL_Y1, buf);
    }
}

void CMainLoop::DrawValve()
{
    char buf[32];
    LCDClear();
    PrintHZ(0, TL_Y0, "阀控器数量", 5);
    PrintHZ(0, TL_Y1, "预设数量", 4);
    bzero(buf, 32);
    sprintf(buf, ":%d", valveCount);
    PrintChar(4, TL_Y1, buf);
    PrintHZ(0, TL_Y2, "在线数量", 4);
    if (checkValve) {
        PrintChar(4, TL_Y2, ":");
        PrintHZ(5, TL_Y2, "检测中", 3);
        checkings[vidx] = true;
    } else {
        GOOGLE_PROTOBUF_VERIFY_VERSION;
        vector<user_t> users;
        if (CValveMonitor::GetInstance()->GetUserList(users)) {
            bzero(buf, 32);
            sprintf(buf, ":%d", users.size());
            PrintChar(4, TL_Y2, buf);
            ValveUserList lst;
            for (vector<user_t>::iterator iter = users.begin(); iter != users.end(); iter ++) {
                ValveUser * u = lst.add_user();
                u->set_uid((google::protobuf::uint64)iter->uid.x);
                u->set_vmac(iter->vmac);
            }
            string strbuf;
            lst.SerializeToString(&strbuf);
            Write((uint8 *)strbuf.c_str(), strbuf.length());
            checkings[vidx] = false;
        } else {
            PrintChar(4, TL_Y2, ":");
            PrintHZ(5, TL_Y2, "检测中", 3);
            checkings[vidx] = true;
        }
    }
}

void CMainLoop::DrawHeat()
{
    uint8 idx = vidx - 4;
    HeatNodeInfoListT info;
    LCDClear();
    if (!CHeatMonitor::GetInstance()->GetHeatNodeInfoList(info)) {
        PrintHZ(0, TL_Y0, "热总表", 3);
        PrintChar(3, TL_Y0, ":");
        PrintHZ(0, TL_Y1, "检测中", 3);
        checkings[vidx] = true;
        return;
    }

    checkings[vidx] = false;

    if (0 == info.size()) {
        PrintHZ(0, TL_Y0, "热总表", 3);
        PrintChar(3, TL_Y0, ":");
        PrintChar(0, TL_Y1, "Err");
        return;
    }

    char buf[32];
    bzero(buf, 32);
    sprintf(buf, "%d-%d(0x%02X):", info.size(), idx + 1, info[idx].MacAddress[0]);
    PrintHZ(0, TL_Y0, "热总表", 3);
    PrintChar(3, TL_Y0, buf);
    if (info[idx].IsOffline) {
        PrintChar(0, TL_Y1, "Offline");
        borders[vidx] = 1;
        return;
    }
    borders[vidx] = 5;

    switch (hidx) {
    case 0: {
        PrintHZ(0, TL_Y1, "供水温度", 4);
        PrintChar(4, TL_Y1, ":");
        PrintChar(4 + 1, TL_Y1, info[idx].SupplyWaterTemperature);
        PrintHZ(4 + 1 + strlen(info[idx].SupplyWaterTemperature) / 2, TL_Y1, "℃", 1);
        PrintHZ(0, TL_Y2, "回水温度", 4);
        PrintChar(4, TL_Y2, ":");
        PrintChar(4 + 1, TL_Y1, info[idx].ReturnWaterTemperature);
        PrintHZ(4 + 1 + strlen(info[idx].ReturnWaterTemperature) / 2, TL_Y1, "℃", 1);
        break;
    }
    case 1: {
        PrintHZ(0, TL_Y1, "瞬时热量", 4);
        PrintChar(4, TL_Y1, ":");
        PrintChar(1, TL_Y2, info[idx].CurrentHeatVelocity);
        PrintChar(1 + strlen(info[idx].CurrentHeatVelocity) / 2, TL_Y2, "GJ");
        break;
    }
    case 2: {
        PrintHZ(0, TL_Y1, "瞬时流量", 4);
        PrintChar(4, TL_Y1, ":");
        PrintChar(1, TL_Y2, info[idx].CurrentFlowVelocity);
        PrintHZ(1 + strlen(info[idx].CurrentFlowVelocity) / 2, TL_Y2, "㎥", 1);
    }
    case 3: {
        PrintHZ(0, TL_Y1, "累计热量", 4);
        PrintChar(4, TL_Y1, ":");
        PrintChar(1, TL_Y2, info[idx].TotalHeat);
        PrintChar(1 + strlen(info[idx].CurrentHeatVelocity) / 2, TL_Y2, "GJ");
    }
    case 4: {
        PrintHZ(0, TL_Y1, "累计流量", 4);
        PrintChar(4, TL_Y1, ":");
        PrintChar(1, TL_Y2, info[idx].TotalFlow);
        PrintHZ(1 + strlen(info[idx].TotalFlow) / 2, TL_Y2, "㎥", 1);
    }
    default:
        break;
    }
}

void CMainLoop::DrawCardHost()
{
    LCDClear();
    PrintHZ(0, TL_Y0, "集中刷卡器状态", 7);
    if (!cardhostEnabled) {
        PrintHZ(2, TL_Y1, "未启用", 3);
        return;
    }
    vector<cardaddr_t> addrs;
    if (!CCardHost::GetInstance()->GetCardInfo(addrs)) {
        PrintHZ(2, TL_Y1, "检测中", 3);
        checkings[vidx] = true;
        return;
    }
    checkings[vidx] = false;
    borders[cardidx] = addrs.size() + 1;
    if (hidx >= borders[cardidx]) {
        hidx = borders[cardidx] - 1;
    }
    char buf[32];
    if (hidx == 0) {
        PrintHZ(0, TL_Y1, "当前在线", 4);
        bzero(buf, 32);
        sprintf(buf, ":%d", addrs.size());
        PrintChar(4, TL_Y1, buf);
    } else {
        uint8 offset = (hidx - 1) * 2;
        bzero(buf, 32);
        sprintf(buf, "%d:%02X%02X%02X%02X%02X%02X", hidx * 2 - 1, addrs[offset].x[0], addrs[offset].x[1], addrs[offset].x[2], addrs[offset].x[3], addrs[offset].x[4], addrs[offset].x[5]);
        if (offset + 1 < addrs.size()) {
            bzero(buf, 32);
            sprintf(buf, "%d:%02X%02X%02X%02X%02X%02X", hidx * 2, addrs[offset + 1].x[0], addrs[offset + 1].x[1], addrs[offset + 1].x[2], addrs[offset + 1].x[3], addrs[offset + 1].x[4], addrs[offset + 1].x[5]);
        }
    }
}

void CMainLoop::DrawUsbPlugin()
{
    LCDClear();
    PrintHZ(0, DL_Y0, "检测到授权磁盘", 7);
    PrintHZ(0, DL_Y1, "是否备份数据", 6);
    PrintChar(6, DL_Y1, "?");
}

void CMainLoop::DrawUsbBackup()
{
    LCDClear();
    PrintHZ(0, DL_Y0, "正在备份数据中", 7);
    PrintHZ(0, DL_Y1, "请等待", 3);
    PrintChar(3, DL_Y1, "...");
}

void CMainLoop::DrawUsbDone()
{
    LCDClear();
    PrintHZ(0, DL_Y0, "数据备份完成", 6);
    PrintHZ(0, DL_Y1, "请拔出磁盘", 5);
}

void CMainLoop::Write(uint8 * data, uint16 len)
{
    if (com == -1) return;
    TX_ENABLE(gpio);
    write(com, data, len);
}
