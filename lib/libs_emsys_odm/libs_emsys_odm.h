/*
 * libs_emsys_odm.h
 *
 *  Created on: 2011-2-15
 *      Author: Administrator
 */

#ifndef LIBS_EMSYS_ODM_H_
#define LIBS_EMSYS_ODM_H_

#include <sys/types.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <math.h>
#include <time.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/time.h>
#include <sys/mman.h>
#include <malloc.h>
#include <sys/file.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <ctype.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <sys/socket.h>
#include <dirent.h>
#include <termios.h>
#include <linux/types.h>
#include <linux/watchdog.h>
#include <linux/rtc.h>
#include <sys/wait.h>
#include <memory.h>
#include <unistd.h>
#include <linux/spi/spidev.h>
#include <getopt.h>

#ifdef CFG_PORT_LIB
//************************************************************
//************************************************************
//*
//**   端口设备相关部分
//*
//************************************************************
//************************************************************

//port的ioctl指令
#define PORT_IOC_MAGIC			'p'
#define IOCTL_PORT_SET_ATTR		_IOW(PORT_IOC_MAGIC, 1, unsigned char)
#define IOCTL_PORT_GET_ATTR		_IOW(PORT_IOC_MAGIC, 2, unsigned char)
#define IOCTL_PORT_READ   		_IOW(PORT_IOC_MAGIC, 3, unsigned char)
#define IOCTL_PORT_WRITE		_IOW(PORT_IOC_MAGIC, 4, unsigned char)

//读写宽度
typedef enum {
	PORT_WIDTH_8 = 0,
	PORT_WIDTH_16,
	PORT_WIDTH_32
} port_wid_t;

//合法的BANK编号
typedef enum {
	PORT_BANK_2 = 0,
	PORT_BANK_4,
	PORT_BANK_5,
	PORT_BANK_6,
	PORT_BANK_7,
} port_bank_t;

//BANK属性
typedef struct {
	port_bank_t bank;
	port_wid_t width;
	short reserved;
} port_attr_t;

//
typedef struct {
	int regAddr;
	int regData;
} port_data_t;

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：    OpenPortDev；
//*     功能描述  ：    打开端口设备；
//*     入口参数  ：    <dev>[in]  - 端口设备名
//*     返回值  ：      成功返回设备句柄fd(>=0)， 失败返回-1；
//*     备  注 ：               无
//*------------------------------------------------------------------------------------------------
extern int OpenPortDev(char *dev);

//*------------------------------------------------------------------------------------------------
//*     函数名称：SetPortCfg；
//*     功能描述：设置端口属性；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <bank>[in] 指定端口Bank配置
//*                     : <width>[in] 指定端口读写宽度(8/16/32)
//*     返回值  ：返回操作状态信息(0:成功；-1:失败)
//*     备  注 ：   端口的Bank由硬件配置决定
//*------------------------------------------------------------------------------------------------
extern int SetPortCfg(int fd, unsigned char bank, unsigned char width);

//*------------------------------------------------------------------------------------------------
//*     函数名称：GetPortCfg；
//*     功能描述：获取端口属性；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <bank>[in] 指定端口Bank配置
//*                     : <width>[in] 指定端口读写宽度(8/16/32)
//*     返回值  ：返回操作状态信息(0:成功；-1:失败)
//*     备  注 ：   端口的Bank由硬件配置决定
//*------------------------------------------------------------------------------------------------
extern int GetPortCfg(int fd, unsigned char *bank, unsigned char *width);

//*------------------------------------------------------------------------------------------------
//*     函数名称：InPortw；
//*     功能描述：16-bit读端口；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <addr>[in] 指定读取的端口地址
//*     返回值  ：返回端口当前值(16-bit),(-1:失败)
//*------------------------------------------------------------------------------------------------
extern inline short InPortw(int fd, unsigned long addr);

//*------------------------------------------------------------------------------------------------
//*     函数名称：OutPortw；
//*     功能描述：16-bit写端口；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <addr>[in] 指定读取的端口地址
//*                     : <data>[in] 写数据
//*     返回值  ：返回状态(0：成功，-1:失败)
//*------------------------------------------------------------------------------------------------
extern inline int OutPortw(int fd, unsigned long addr, short data);

//*------------------------------------------------------------------------------------------------
//*     函数名称：InPortl；
//*     功能描述：32-bit读端口；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <addr>[in] 指定读取的端口地址
//*     返回值  ：返回端口当前值(16-bit),(-1:失败)
//*------------------------------------------------------------------------------------------------
extern inline int InPortl(int fd, unsigned long addr);

//*------------------------------------------------------------------------------------------------
//*     函数名称：OutPortw；
//*     功能描述：16-bit写端口；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <addr>[in] 指定读取的端口地址
//*                     : <data>[in] 写数据
//*     返回值  ：返回状态(0：成功，-1:失败)
//*------------------------------------------------------------------------------------------------
extern inline int OutPortl(int fd, unsigned long addr, int data);

//*------------------------------------------------------------------------------------------------
//*     函数名称：InPortw；
//*     功能描述：16-bit读端口；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <addr>[in] 指定读取的端口地址
//*     返回值  ：返回端口当前值(16-bit),(-1:失败)
//*------------------------------------------------------------------------------------------------
extern inline char InPortb(int fd, unsigned long addr);

//*------------------------------------------------------------------------------------------------
//*     函数名称：OutPortw；
//*     功能描述：16-bit写端口；
//* 入口参数 : <fd>[in]  指定端口设备的句柄(即OpenPortDev()的返回值)
//*                     : <addr>[in] 指定读取的端口地址
//*                     : <data>[in] 写数据
//*     返回值  ：返回状态(0：成功，-1:失败)
//*------------------------------------------------------------------------------------------------
extern inline int OutPortb(int fd, unsigned long addr, char data);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ：ClosePortDev
//* 功能描述 ：关闭总线端口设备
//* 入口参数 : <fd>[in]  指定总线端口设备的句柄(即OpenPortDev()的返回值)
//* 返回值 ： 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int ClosePortDev(int fd);

#endif


#ifdef CFG_GPIO_LIB
//************************************************************
//************************************************************
//*
//**   GPIO设备相关部分
//*
//************************************************************
//************************************************************
//GPIO端口结构
typedef enum {
        PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7, PA8, PA9, PA10, PA11, PA12, PA13, PA14, PA15,
        PA16, PA17, PA18, PA19, PA20, PA21, PA22, PA23, PA24, PA25, PA26, PA27, PA28, PA29, PA30, PA31,
        PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7, PB8, PB9, PB10, PB11, PB12, PB13, PB14, PB15,
        PB16, PB17, PB18, PB19, PB20, PB21, PB22, PB23, PB24, PB25, PB26, PB27, PB28, PB29, PB30, PB31,
        PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, PC11, PC12, PC13, PC14, PC15,
        PC16, PC17, PC18, PC19, PC20, PC21, PC22, PC23, PC24, PC25, PC26, PC27, PC28, PC29, PC30, PC31,
        PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7, PD8, PD9, PD10, PD11, PD12, PD13, PD14, PD15,
        PD16, PD17, PD18, PD19, PD20, PD21, PD22, PD23, PD24, PD25, PD26, PD27, PD28, PD29, PD30, PD31,
        PE0, PE1, PE2, PE3, PE4, PE5,PE6, PE7,PE8,PE9,PE10,PE11,PE12,PE13, PE14, PE15,
        PE16, PE17, PE18, PE19, PE20, PE21, PE22, PE23, PE24, PE25, PE26, PE27, PE28, PE29, PE30, PE31
}gpio_name_t;

//端口类型
typedef enum {
	PIO_MODE_OUT = 0,
	PIO_MODE_IN,
	PIO_MODE_A,
	PIO_MODE_B,
} gpio_mode_t;

//内部电阻使能
typedef enum {
	PIO_RESISTOR_NOEFFECT = 0,
	PIO_RESISTOR_DOWN,
	PIO_RESISTOR_PULLUP,
} gpio_resis_t;

//输入滤波
typedef enum {
	PIO_FILTER_NOEFFECT = 0,
	PIO_FILTER_DISABLED,
	PIO_FILTER_ENABLED,
} gpio_fiter_t;

//漏极开路
typedef enum {
	PIO_MULDRIVER_NOEFFECT = 0,
	PIO_MULDRIVER_DISABLED,
	PIO_MULDRIVER_ENABLED,
} gpio_muldriver_t;

//GPIO端口属性
typedef struct {
	gpio_mode_t mode;
	gpio_resis_t resis;
	gpio_fiter_t filter;
	gpio_muldriver_t multer;
} gpio_attr_t;

//*------------------------------------------------------------------------------------------------
//*     函数名称：SetPIOCfg；
//*     功能描述：设置GPIO的端口属性；
//* 入口参数 : < attr >[in]  指定GPIO的属性（模式、内部电阻状态、滤波器等等）
//*     返回值  ：返回操作状态信息(0:成功；-1:失败)
//*     备  注 ：  无
//*------------------------------------------------------------------------------------------------
extern int SetPIOCfg(gpio_name_t pio, gpio_attr_t attr);

//*------------------------------------------------------------------------------------------------
//*     函数名称：PIOOutValue；
//*     功能描述：GPIO端口输出；
//* 入口参数 : <pio>[in]  指定GPIO端口
//*                     : <val>[in] 指定输出状态
//*     返回值  ：操作状态(0:成功，-1：失败)
//*------------------------------------------------------------------------------------------------
extern int PIOOutValue(gpio_name_t pio, char val);

//*------------------------------------------------------------------------------------------------
//*     函数名称：PIOInValue；
//*     功能描述：读GPIO端口输入；
//* 入口参数 : <pio>[in]  指定GPIO端口
//*     返回值  ：返回GPIO端口状态（0/1：成功，-1：失败）
//*------------------------------------------------------------------------------------------------
extern int PIOInValue(gpio_name_t pio);

#endif

#ifdef CFG_USART_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//**                     串口设备相关部分
//**  注：若在同一个进程中需要对多个串口进行轮询读，
//**     为达到更优的阻塞效果，建议直接使用select+read机制
//**    而不采用库中读API函数ReadCom，其他函数仍可使用。
//*
//*-----------------------------------------------------------
//************************************************************

//串口的默认参数
#define COM_BAUDDEF		(115200)
#define	COM_DABITSDEF	(8)
#define COM_STBITSDEF	(1)
#define COM_PARITYDEF	('N')


//*------------------------------------------------------------------------------------------------
//*     函数名称  ：    OpenCom；
//*     功能描述  ：    打开并初始化串口；
//*     入口参数  ：    <dev>[in]  - 串口设备名
//*                     :       <configs>[in] - 串口参数字符串:波特率,数据位，停止位，校验位
//*                     :       <mode>[in] - 指定打开设备时的操作标识
//*                     :                 读模式：O_RDONLY
//*                     :                                 写模式：O_WRONLY
//*                     :                 读写模式：O_RDWR
//*     返回值  ：      成功返回设备句柄fd(>=0)， 失败返回-1；
//*     备  注 ：               无
//*------------------------------------------------------------------------------------------------

extern int OpenCom(char *dev, char *configs, int mode);

//*------------------------------------------------------------------------------------------------
//*     函数名称：      SetComCfg
//*     功能描述：      设置串口参数；
//*     入口参数  ：    <fd>[in]  - 串口设备文件句柄
//*                     :       <configs>[in] - 串口参数字符串:波特率,数据位，停止位，校验位
//*                                                             如:   "115200,8,1,N"
//*     返回值  ：      成功返回0, 失败返回-1；
//*     备   注 ：      无
//*------------------------------------------------------------------------------------------------

extern int SetComCfg(int fd, char *configs);

//*------------------------------------------------------------------------------------------------
//*     函数名称：ReadCom；
//*     功能描述：读串口设备数据；
//* 入口参数 : <fd>[in]  指定串口设备的句柄(即OpenCom()的返回值)
//*                     : <buffer>[in/out] 读取的数据存放缓冲区
//*                     : <len>[in/out] 指定读取的数据长度(指针)，并返回实际读取的数据数目
//*                     : <timesout>[in]   指定最大的阻塞读取等待间隔，单位: useconds(微秒)
//*                     :        当timesout<=0，阻塞读模式，即直到读够指定数据个数后函数返回
//*     返回值  ：返回操作状态信息(0:成功返回， -1：失败)
//*     备  注 ：   1、分配采样值存放缓冲区时，一定要足够存放指定的数据个数。
//*             2、当置为阻塞读模式时，指定的读数据个数需要恰当，否则可能会造成进程阻塞，若没有相应
//*                个数数据供读操作的话。
//*				3、实际成功读取数据大小，由参数len返回。
//*------------------------------------------------------------------------------------------------

extern int ReadCom(int fd, char *buffer, unsigned int *len, int timesout);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：WriteCom；
//*     功能描述  ：向串口发数据；
//* 入口参数 : <fd>[in]  指定串口设备的句柄(即OpenCom()的返回值)
//*                     : <buffer>[in/out] 读取的采样值缓冲区
//*                     : <len>[in/out] 指定写的数据长度，并返回实际写完的数据长度
//*                     : <timesout>[in]   指定最大的阻塞写等待间隔，单位: useconds(微秒)
//*                     :      当timesout<=0，阻塞写模式，即直到写完指定数据个数后函数返回
//*     返回值  ：返回操作状态信息(0:成功返回， -1：失败)
//*     备  注 :	1、当置为阻塞写模式时，指定的数据个数需要恰当，否则可能会造成进程阻塞，若当前设备不可写的话
//*				2、实际写的数据大小，由参数len返回。

//*------------------------------------------------------------------------------------------------

extern int WriteCom(int fd, char *buffer, unsigned int *len,
			  int timesout);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ：CloseCom
//* 功能描述 ：关闭串口设备
//* 入口参数 : <fd>[in]  指定串口设备的句柄(即OpenCom()的返回值)
//* 返回值：成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int CloseCom(int fd);

#endif

#ifdef CFG_ADC_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*        ADC设备相关部分
//*
//*-----------------------------------------------------------
//************************************************************

//定义采样值宽度(16-bit)
typedef unsigned short cyg_adc_sample;
//定义总的采集通道数
#define TOTALADCCHAN				(8)

//ADC设备的Ioctl命令接口定义
//注：当前版本不支持下列配置指令
#if 0
#define ADC_IOC_MAGIC           'a'
#define SETADC_START_IOCFG      _IOW(ADC_IOC_MAGIC, 1, unsigned char)
#define SETADC_STOP_IOCFG       _IOW(ADC_IOC_MAGIC, 2, unsigned char)
#define SETADC_RATE_IOCFG       _IOW(ADC_IOC_MAGIC, 3, unsigned char)
#define SETADC_MODE_IOCFG       _IOW(ADC_IOC_MAGIC, 4, unsigned char)
#define SETADC_CURCHAN_IOCFG    _IOW(ADC_IOC_MAGIC, 5, unsigned char)
#define SETADC_ENCHAN_IOCFG     _IOW(ADC_IOC_MAGIC, 6, unsigned char)
#define SETADC_DISCHAN_IOCFG    _IOW(ADC_IOC_MAGIC, 7, unsigned char)
#define GETADC_STAT_IOCFG       _IOR(ADC_IOC_MAGIC, 8, unsigned char)
#define GETADC_RATE_IOCFG       _IOR(ADC_IOC_MAGIC, 9, unsigned char)
#define GETADC_MODE_IOCFG       _IOR(ADC_IOC_MAGIC, 10, unsigned char)
#endif

//AD采样值变换结构(cyg_adc_sample -> float)
struct __sampl_to_float {
	cyg_adc_sample ivalue;
	float fvalue;
};

//*------------------------------------------------------------------------------------------------
//* 函数名称 ：   OpenAdc
//* 功能描述 ：   打开ADC设备
//* 入口参数 : <dev>[in]  指定打开的ADC的设备文件名,可直接置为NULL，由系统自动指定
//*                     : <mode>[in] 指定打开设备时的操作标识
//*                     :               读模式：O_RDONLY
//*                     :               写模式：O_WRONLY
//*                     :               读写模式：O_RDWR
//* 返回值：   成功返回设备文件句柄(>=0)；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int OpenAdc(char *dev, int mode);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ：  CloseAdc
//* 功能描述 ：   关闭ADC设备
//* 入口参数 : <fd>[in]  指定ADC设备的句柄(即OpenAdc()的返回值)
//* 返回值：  成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int CloseAdc(int fd);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： SetAdcCfg
//* 功能描述 ： 对ADC设备进行配置
//* 入口参数 : <fd>[in]  指定ADC设备的句柄(即OpenAdc()的返回值)
//*                     : <cmd>[in] 指定针对ADC设备的CFG指令
//*                     :               SETADC_START_IOCFG：启动ADC采样
//*                     :                               SETADC_STOP_IOCFG:  停止ADC采样
//*                     :               SETADC_RATE_IOCFG：   设置采样率
//*                     :                               SETADC_MODE_IOCFG:  设置采样模式
//*                     :               SETADC_ENCHAN_IOCFG：      使能指定的采样通道
//*                     :                               SETADC_DISCHAN_IOCFG:  无效指定的采样通道
//*                     : <buffer>[in] ADC配置指令的参数缓冲区
//*                     : <len>[in]    ADC配置指令的参数长度
//* 返回值 ： 返回操作状态信息(0:成功， -1：失败)
//* 备  注 ：   当前版本函数为空函数，均返回0
//*------------------------------------------------------------------------------------------------

extern int SetAdcCfg(int fd, unsigned int cmd, char *buffer,
			   unsigned int len);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： GetAdcCfg
//* 功能描述 ： 得到ADC设备的当前配置
//* 入口参数 : <fd>[in]  指定ADC设备的句柄(即OpenAdc()的返回值)
//*                     : <cmd>[in] 针对ADC设备的CFG指令
//*                     :               GETADC_STAT_IOCFG：   采样通道的使能状态
//*                     :                               GETADC_RATE_IOCFG:  采样率
//*                     :               GETADC_MODE_IOCFG：   采样模式
//*                     : <buffer>[in/out] 返回当前配置的数值缓冲区
//*                     : <len>[in/out]    返回当前配置的数值长度
//* 返回值 ： 返回操作状态信息(0:成功， -1：失败)
//* 备  注 ：   当前版本函数为空函数，均返回0
//*------------------------------------------------------------------------------------------------
extern int GetAdcCfg(int fd, unsigned int cmd, char *buffer,
			   unsigned int *len);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： ReadAdcSampling
//* 功能描述 ： 读ADC的采样值
//* 入口参数 : <fd>[in]  指定ADC设备的句柄(即OpenAdc()的返回值)
//*                     : <channel>[in] 指定需要读取的采样通道号
//*                     :               指定通道号>0: 读取指定的某单一通道
//*                     :                               指定通道号=0: 读取所有通道
//*                     : <buffer>[in/out] 读取的采样值缓冲区
//*                     : <len>[in/out]    指定读取的采样值数，并返回实际读取的采样值数目
//*                     :                      读取单一通道时，len指定读取该通道的总采样值个数
//*                     :                      同时读取所有通道时，len指定针对每一通道的采样值个数
//*                     : <timesout>[in]   指定最大的阻塞读取等待间隔，单位: useconds(微秒)
//*                     :           		当前版本不支持该参数
//* 返回值 ： 返回操作状态信息(0:成功， -1：失败)
//* 备  注 ：   1、分配采样值存放缓冲区时，一定要足够存放指定的采样值个数：
//*         :            读取单一通道时： 缓冲区大小 >=  len * sizeof(cyg_adc_sample)
//*     :              读取所有通道时： 缓冲区大小 >=  TOTALCHAN * len * sizeof(cyg_adc_sample)
//*------------------------------------------------------------------------------------------------
extern int ReadAdcSampling(int fd, unsigned int channel,
				 cyg_adc_sample * buffer, unsigned int *len,
				 int timesout);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： ConvAdcValue
//* 功能描述 ： 转换采样值(数字量)为对应模拟量
//* 入口参数 : <buffer>[in]  存放采样值的缓冲区
//*                     : <len>[in]     需转换的采样值个数
//*                     : <vlaues>[in/out] 转换模拟量的存放缓冲区
//*                     : <keys>[in]    转换参数表
//* 返回值 ： 0：成功； -1 失败
//* 备  注 ：   1、转换关系表如下所示：
//*            struct __sampl_to_float keysvlaue[] = {
//*              {0xfff, 3.32},
//*              {0x12,  0.02} };
//*             上述数组为两组数字量与相对应模拟量数值，需根据实际测量进行设定
//*------------------------------------------------------------------------------------------------
extern int ConvAdcValue(cyg_adc_sample * buffer, unsigned int len,
			      float *values, struct __sampl_to_float *keys);


#endif

#ifdef CFG_DAC_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//**   DA设备相关部分
//*
//*-----------------------------------------------------------
//************************************************************

//默认DA输出宽度(16-bit)
typedef unsigned short cyg_dac_out;

//AD采样值变换结构(float -> cyg_dac_out)
struct __float_to_dacout {
	float fvalue;
	cyg_dac_out ivalue;
};

#define TOTALDACCHAN	(4)
//*------------------------------------------------------------------------------------------------
//* 函数名称 ：OpenDac
//* 功能描述 ： 打开DAC设备
//* 入口参数 : <dev>[in]  指定打开的DAC的设备文件名，可置为为NULL，由系统自动指定
//*                     : <mode>[in] 指定打开设备时的操作标识
//*                     :               读模式：O_RDONLY
//*                     :                               写模式：O_WRONLY
//*                     :               读写模式：O_RDWR
//* 返回值：成功返回设备文件句柄(>=0)；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int OpenDac(char *dev, int mode);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：WriteDacVal；
//*     功能描述  ：向DAC输出数据；
//* 入口参数 : <fd>[in]  指定DAC的句柄(为保持兼容而保留，可直接置为0)
//*                     : <chan>[in] 指定输出的DA通道
//*                     : <value>[in] 指定输出的电压值(浮点数)
//*                     : <keys>[in]  转换参数表
//* 返回值 ：返回操作状态信息(0：成功， -1：失败)
//* 备  注 ：   1、转换关系表如下所示：
//*           struct __sampl_to_float keysvlaue[] = {
//*                       {3.32, 0xfff},
//*                       {0.02, 0x12} };
//*         上述数组为两组模拟量与相对应数字量数值，
//*         根据芯片参数或者实际测量进行设定。
//*------------------------------------------------------------------------------------------------

extern int WriteDacVal(int fd, unsigned char chan, float value,
			     struct __float_to_dacout *keys);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ：CloseDac
//* 功能描述 ：关闭DAC设备
//* 入口参数 : <fd>[in]  指定DAC的句柄(为保持兼容而保留，可直接置为0)
//* 返回值 ：成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int CloseDac(int fd);

#endif


#ifdef CFG_DATETIM_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//**   系统时间设置相关部分
//*
//*-----------------------------------------------------------
//************************************************************

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：GetDateTime
//*     功能描述  ：获取当前日期与时间
//*     入口参数 : <data>[in/out] 返回当前日期与时间数值
//*                     :                data[0] --- year
//*                     :                       data[1] --- month
//*                     :                data[2] --- day
//*                     :                data[3] --- hour
//*                     :                        data[4] --- minute
//*                     :                data[5] --- second
//*                     :                data[6] --- wday
//*						:<from>[in], 指定时间出处(0:系统时间， 1：RTC时间（墙钟）)
//*     返回值： 成功返回ERROR_OK(==0)；失败返回-1
//*     备     注 ：        无
//*------------------------------------------------------------------------------------------------

extern int GetDateTime(unsigned int* data, char from);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：GetDate
//*     功能描述  ：获取当前日期
//*        入口参数 : <data>[in/out] 返回当前日期
//*                     :                data[0] --- year
//*                     :                       data[1] --- month
//*                     :                data[2] --- day
//*                     :                data[3] --- wday
//*						:<from>[in], 指定时间出处(0:系统时间， 1：RTC时间（墙钟）)
//*     返回值 ： 成功返回ERROR_OK(==0)；失败返回-1
//*     备  注 ：        无
//*------------------------------------------------------------------------------------------------

extern int GetDate(unsigned int* data, char from);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：GetTime
//*     功能描述  ：获取当前时间；
//*     入口参数 : <data>[in/out] 返回当前时间数值
//*                     :                data[0] --- hour
//*                     :                        data[1] --- minute
//*                     :                data[2] --- second
//*						:<from>[in], 指定时间出处(0:系统时间， 1：RTC时间（墙钟）)
//*     返回值：成功返回ERROR_OK(==0)；失败返回-1
//*     备  注 ：        无
//*------------------------------------------------------------------------------------------------

extern int GetTime(unsigned int* data, char from);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：SetDateTime
//*     功能描述  ：设置当前日期与时间
//*     入口参数 : <data>[in/out] 包含日期与时间的预设定数值
//*                     :                data[0] --- year
//*                     :                        data[1] --- month
//*                     :                data[2] --- day
//*                     :                data[3] --- hour
//*                     :                        data[4] --- minute
//*                     :                data[5] --- second
//*						:<to>[in], 时间类型(2:重置RTC时间(墙钟)， 1：重置系统时间, 0:全部重置)
//*    返回值  ：  成功返回ERROR_OK(==0)；失败返回-1
//*    备      注 ：        无
//*------------------------------------------------------------------------------------------------

extern int SetDateTime(unsigned int* data, char to);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：SetTime
//*     功能描述  ：设置当前时间
//*    入口参数 : <data>[in/out] 包含时间的预设定数值
//*                     :                data[0] --- hour
//*                     :                        data[1] --- minute
//*                     :                data[2] --- second
//*						:<to>[in], 时间类型(2:重置RTC时间(墙钟)， 1：重置系统时间, 0:全部重置)
//*    返回值： 成功返回ERROR_OK(==0)；失败返回-1
//*    备     注 ：        无
//*------------------------------------------------------------------------------------------------

extern int SetTime(unsigned int* data, char to);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：SetDate
//*     功能描述  ：设置当前时间
//*     入口参数 : <data>[in/out] 包含时间的预设定数值
//*                     :                data[0] --- year
//*                     :                        data[1] --- month
//*                     :                data[2] --- day
//*						:<from>[in], 时间类型(2:重置RTC时间(墙钟)， 1：重置系统时间, 0:全部重置)
//*     返回值：成功返回ERROR_OK(==0)；失败返回-1
//*     备  注 ：        无
//*------------------------------------------------------------------------------------------------
extern int SetDate(unsigned int* data, char to);

#endif

#ifdef CFG_TIMER_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*               定时器相关部分
//*
//*-----------------------------------------------------------
//************************************************************

//定时器执行函数指针定义
typedef void (*FUNC) (int sig);
//单次触发定时器
#define SINSHOT_MODE	(0xA5)
//周期性触发定时器
#define PERSHOT_MODE	(0x5A)

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：GreateTimer；
//*     功能描述  ：创建定时器
//* 入口参数 : <handler>[in] 定时器的句柄函数(即周期性执行函数)
//*                     : <args>[in]    传递给句柄函数的参数（不可用，为兼容而保留）
//*                     : <usecs>[in]   指定定时间隔，单位: useconds(微秒)
//*                     : <mode>[in]    指定定时器的触发模式
//*             :                                SINSHOT_MODE   :    单次触发
//*             :                                PERSHOT_MODE   :    周期性触发
//* 返回值 : 返回操作状态信息(ERROR_OK/ERROR_FAIL)
//*     备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int CreateTimer(FUNC handler, void *args, unsigned int usecs,
			     unsigned char mode);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：Usermsdelay；
//*     功能描述  ：用户层延时函数（相对精确）
//*     入口参数 : <millsecs>[in] 延时大小(单位：毫秒ms)
//* 	返回值 : 延时时刻到成功返回0，否则-1
//*     备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int Usermsdelay(unsigned int millsecs);

#endif

#ifdef CFG_HIGHTIMER_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*               高精度定时器相关部分
//*               （需要硬件支持）
//*-----------------------------------------------------------
//************************************************************

//定时器执行函数指针定义
typedef void (*HFUNC) (int sig, siginfo_t *extra, void *args);
//单次触发定时器
#define HIGHSINSHOT_MODE	(0xA1)
//周期性触发定时器
#define HIGHSPERSHOT_MODE	(0x1A)

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：GreateHighResTimer；
//*     功能描述  ：创建定时器
//* 入口参数 : <handler>[in] 定时器的句柄函数(即定时器执行函数)
//*                     : <timerid>[in]    高精度定时器句柄指针（供删除定时器时使用）
//*                     : <nsecs>[in]   指定定时间隔，单位: neconds(纳秒)
//*                     : <mode>[in]    指定定时器的触发模式
//*             :                                HIGHSINSHOT_MODE   :    单次触发
//*             :                                HIGHSPERSHOT_MODE   :    周期性触发
//* 返回值 : 返回操作状态信息(成功0/失败-1)
//*     备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int GreateHighResTimer(HFUNC handler, timer_t *timerid, unsigned int nsecs,
		unsigned char mode);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：DelHighResTimer；
//*     功能描述  ：用户层延时函数（相对精确）
//* 入口参数 : <timerid>[in]    高精度定时器句柄指针（由GreateHighResTimer返回）
//*
//* 返回值 : 返回操作状态信息(成功0/失败-1)
//*     备  注 ：   参数一定是GreateHighResTimer返回的定时器句柄
//*------------------------------------------------------------------------------------------------
extern int DelHighResTimer(timer_t timerid);

//*------------------------------------------------------------------------------------------------
//*     函数名称  ：Userusdelay；
//*     功能描述  ：用户层延时函数（相对精确）
//*     入口参数 : <usecs>[in] 延时大小(单位：微秒us)
//* 	返回值 : 延时时刻到成功返回0，否则-1
//*     备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int Userusdelay(unsigned int usecs);

#endif

#ifdef CFG_WDT_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*                看门狗设备相关部分
//*
//*-----------------------------------------------------------
//************************************************************

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： Enable_WatchDog
//* 功能描述 ：使能看门狗设备
//* 入口参数 : <dev>[in]  指定看门狗的设备文件名,即"/dev/watchdog"
//*                     : <TimeOut>[in] 指定看门狗的最大喂狗间隔
//* 返回值 ：成功返回设备文件句柄(>=0)；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int Enable_WatchDog(char *dev, int TimeOut);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： Feed_WatchDog
//* 功能描述 ： 喂狗操作
//* 入口参数 : <fd>[in]  看门狗的设备句柄
//* 返回值 ： 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int Feed_WatchDog(int fd);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： Disable_WatchDog
//* 功能描述 ： 关闭看门狗
//* 入口参数 : <fd>[in]  看门狗的设备句柄
//* 返回值： 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int Disable_WatchDog(int fd);

#endif

#ifdef CFG_SERIALID_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*               ID加密芯片设备相关部分
//*						需硬件支持
//*
//*-----------------------------------------------------------
//************************************************************
///*------------------------------------------------------------------------------------------------
//* 函数名称 : OpenSerialID
//* 功能描述 : 打开串行ID设备
//* 入口参数 : <dev>[in]  指定串行ID设备文件名
//*                     : <mode>[in] 指定打开设备时的操作标识
//*                     :               读模式：O_RDONLY
//*                     :               写模式：O_WRONLY
//*                     :               读写模式：O_RDWR
//* 返回值 : 成功返回设备文件句柄(>=0)；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int OpenSerialID(char *dev, int mode);

//*------------------------------------------------------------------------------------------------
//* 函数名称 : ReadSerialID
//* 功能描述 : 从串行ID中读取设备ID号
//* 入口参数 : <fd>[in]  <fd>[in]  指定DI设备的句柄(即OpenSerialID()的返回值)
//*                     : <value>[out] 返回当前温度值（浮点数）
//* 返回值 : 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int ReadSerialID(int fd, unsigned char* data, unsigned char* len);

//*------------------------------------------------------------------------------------------------
//* 函数名称 : CloseSerialID
//* 功能描述 : 关闭串行ID设备
//* 入口参数 : <fd>[in]  指定DI/DO设备的句柄(即OpenSerialID()的返回值)
//* 返回值 : 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int CloseSerialID(int fd);
#endif

#ifdef CFG_TEMPER_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*               温湿度传感设备相关部分
//*
//*-----------------------------------------------------------
//************************************************************
/******   TM control cmd   *********/
#define	TM_IOCTL_BASE	'T'
#define	TM_SET_RESOLUTION		_IOW(TM_IOCTL_BASE, 0, unsigned char)
#define	TM_GET_RESOLUTION		_IOW(TM_IOCTL_BASE, 1, unsigned char)
#define	TM_SET_MAXLIM			_IOW(TM_IOCTL_BASE, 2, unsigned char)
#define	TM_GET_MAXLIM  			_IOW(TM_IOCTL_BASE, 3, unsigned char)
#define	TM_SET_MINLIM			_IOW(TM_IOCTL_BASE, 4, unsigned char)
#define	TM_GET_MINLIM			_IOW(TM_IOCTL_BASE, 5, unsigned char)

///*------------------------------------------------------------------------------------------------
//* 函数名称 : OpenThermometer
//* 功能描述 : 打开传感器设备
//* 入口参数 : <dev>[in]  指定传感器(DI)的设备文件名
//*                     : <mode>[in] 指定打开设备时的操作标识
//*                     :               读模式：O_RDONLY
//*                     :                               写模式：O_WRONLY
//*                     :               读写模式：O_RDWR
//* 返回值 : 成功返回设备文件句柄(>=0)；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int OpenThermometer(char *dev, int mode);


//*------------------------------------------------------------------------------------------------
//* 函数名称 : SetTemperatureCfg
//* 功能描述 : 配置温度传感器的设置
//* 入口参数 : <fd>[in]  指定传感器设备的句柄(即OpenThermometer()的返回值)
//*                     : <cmd>[in] 指定针对传感器设备的CFG指令
//*                     :               TM_SET_RESOLUTION：设定分辨率
//*                     :               TM_SET_MAXLIM:  设定报警最高限值（暂不支持）
//*                     :               TM_SET_MINLIM：   设定报警最低限值（暂不支持）
//*                     : <buf>[in] 传感器设备配置指令的参数缓冲区
//*                     : <len>[in]    传感器设备配置指令的参数长度
//* 返回值 : 返回操作状态信息(0:成功, -1:失败)
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int SetTemperatureCfg(int fd, unsigned int cmd, char *buf,
		   unsigned int* len);

//*------------------------------------------------------------------------------------------------
//* 函数名称 : ReadTemperature
//* 功能描述 : 从温度传感器读取当前温度
//* 入口参数 : <fd>[in]  <fd>[in]  指定DI设备的句柄(即OpenThermometer()的返回值)
//*                     : <value>[out] 返回当前温度值（浮点数）
//* 返回值 : 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int ReadTemperature(int fd, float* value);

//*------------------------------------------------------------------------------------------------
//* 函数名称 : CloseThermometer
//* 功能描述 : 关闭传感器设备
//* 入口参数 : <fd>[in]  指定DI/DO设备的句柄(即OpenThermometer()的返回值)
//* 返回值 : 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------
extern int CloseThermometer(int fd);

#endif

#ifdef CFG_KBD_LIB
//************************************************************
//*-----------------------------------------------------------
//*
//*                键盘设备相关部分
//*
//*-----------------------------------------------------------
//************************************************************

//区分弹起/按下的阈值（需与驱动关联）
#define UP_THRESHOLD_DOWN	(0x80)

//
#define DOWN_KEY			(0x0)
#define UP_KEY				(0x1)

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： OpenKbd
//* 功能描述 ： 打开键盘设备
//* 入口参数 : <dev>[in]  指定打开的键盘的设备文件名
//*                     : <mode>[in] 指定打开设备时的操作标识
//*                     :               读模式：O_RDONLY
//*                     :                               写模式：O_WRONLY
//*                     :               读写模式：O_RDWR
//* 返回值 ：成功返回设备文件句柄(>=0)；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int OpenKbd(char *dev, int mode);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： FlushKbd
//* 功能描述 ： 清空键盘缓冲区
//* 入口参数 : <fd>[in]  指定KBD设备的句柄(即OpenKbd()的返回值)
//* 返回值：成功返回0；无按键值或者失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int FlushKbd(int fd);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ： GetKeyValue
//* 功能描述 ： 读取键盘值
//* 入口参数 : <fd>[in]  指定KBD设备的句柄(即OpenKbd()的返回值)
//*                     : <keyValue>[in/out] 返回按键值
//*                     : <status>[in/out]   被返回按键的操作状态(UP/DOWN)
//* 返回值 ： 成功返回0；无按键值或者失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int GetKeyValue(int fd, unsigned short *keyValue,
			     unsigned char *status);

//*------------------------------------------------------------------------------------------------
//* 函数名称 ：CloseKbd
//* 功能描述 ：关闭键盘设备
//* 入口参数 : <fd>[in]  指定KBD设备的句柄(即OpenKbd()的返回值)
//* 返回值 ： 成功返回0；失败返回-1
//* 备  注 ：   无
//*------------------------------------------------------------------------------------------------

extern int CloseKbd(int fd);

#endif

//************************************************************
//************************************************************
//*
//**   其他辅助函数
//*
//************************************************************
//************************************************************
extern inline unsigned short _inw(unsigned long addr);
extern inline void _outw(unsigned long addr, unsigned short dat);
extern inline unsigned long _inl(unsigned long addr);
extern inline void _outl(unsigned long addr, unsigned long dat);
extern inline unsigned char _inb(unsigned long addr);
extern inline void _outb(unsigned long addr, unsigned char dat);
extern void _nops(unsigned long nums);
extern int _Readn(int fd, void *buf, int n);
extern int _Writen(int fd, const void *buf, int n);
#endif /* LIBS_EMSYS_ODM_H_ */
